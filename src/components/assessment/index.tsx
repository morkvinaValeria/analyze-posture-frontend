/* eslint-disable react-hooks/exhaustive-deps */
import React, { useContext, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import shrimpImage from '../../assets/img/shrimp.png';
import { AppRoute } from '../../common/enums';
import {
  IFullPosturePrediction,
  ISidePosturePrediction,
} from '../../common/interfaces';
import { DetectedPoints } from '../../common/types';
import { StepContext, UploadFileWithBase64 } from '../../contexts/step';
import { PredictPostureService } from '../../services/predict-posture.service';
import ToggleSwitch from '../common/toggle-switch';
import ImageWithLines from './image-with-lines';
import Prediction from './prediction';

import styles from './styles.module.scss';

const Assessment: React.FC = () => {
  const DISABLED_COLOR = 'grey';
  const navigate = useNavigate();

  const predictPostureService = new PredictPostureService();
  const stepContext = useContext(StepContext);

  const [points] = useState<Record<string, DetectedPoints>>({
    ...stepContext?.pointList,
  });
  const [statPoints] = useState<Record<string, DetectedPoints>>({
    ...stepContext?.statisticalPoints,
  });
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [angles, setAngles] = useState<Record<string, number>>({});
  const [currentFile, setCurrentFile] = useState<
    UploadFileWithBase64 & { index: number }
  >({
    ...(stepContext?.isStatisticalMode
      ? (stepContext?.statisticalFileList[0] as UploadFileWithBase64)
      : (stepContext?.fileList[0] as UploadFileWithBase64)),
    index: 0,
  });
  const [prediction, setPrediction] = useState<
    ISidePosturePrediction | IFullPosturePrediction
  >();

  const isPrevDisabled = () => currentFile?.index === 0;
  const isNextDisabled = () => {
    const list =
      (stepContext?.isStatisticalMode
        ? stepContext?.statisticalFileList
        : stepContext?.fileList) || [];
    return currentFile?.index >= list.length - 1;
  };

  const changeFile = (n: number) => {
    if (stepContext?.fileList && currentFile) {
      const newFile = stepContext?.fileList[currentFile.index + n];
      setCurrentFile({ ...newFile, index: currentFile.index + n });
    }
  };
  const revertAnglesToShow = (angles: Record<string, number>) => {
    const newAngles = {} as Record<string, number>;
    Object.keys(angles).forEach(
      (key) =>
        (newAngles[key as keyof typeof newAngles] =
          angles[key] > 90 ? 180 - angles[key] : angles[key])
    );
    setAngles(newAngles);
  };

  const getPrediction = async (): Promise<
    ISidePosturePrediction | IFullPosturePrediction
  > => {
    const postureAngles = Object.values(angles).map((angle) =>
      angle.toString()
    );

    return predictPostureService.predictPosture(
      postureAngles,
      points[currentFile.uid].sideView
    );
  };

  useEffect(() => {
    if (Object.values(angles).length !== 0) {
      getPrediction()
        .then((result) => {
          if (result) {
            setPrediction(result);
          }
        })
        .catch((e: any) => navigate(`/${AppRoute.NOT_FOUND}`));
    }
  }, [angles]);

  useEffect(() => {
    if (Object.keys(points).length !== 0) {
      setIsLoading(false);
    }
  }, [points, currentFile]);

  useEffect(() => {
    if (!points[currentFile.uid]) {
      setIsLoading(true);
    }
  }, [currentFile]);

  return (
    <>
      <h5>Assessment Results</h5>
      <p className={styles.thankYou}>
        Thank you for completing your posture assessment! Below, you will find
        the results generated by our advanced neural network analysis, which
        evaluates key angles and classifies your posture. Based on these
        findings, we‚Äôve also provided tailored recommendations for exercises to
        help improve your alignment and overall well-being.
      </p>
      {isLoading === false && currentFile && points[currentFile.uid] ? (
        <div className={styles.imgSlider}>
          <button
            className={styles.prev}
            onClick={() => changeFile(-1)}
            disabled={isPrevDisabled()}
            style={isPrevDisabled() ? { color: DISABLED_COLOR } : {}}
          >
            &#10094;
          </button>
          <ImageWithLines
            file={currentFile}
            points={points[currentFile.uid]}
            key={currentFile?.index || -1}
            saveAngles={revertAnglesToShow}
            statisticalPoints={statPoints[currentFile.uid]}
          />
          <div className={styles.description}>
            <div>
              <ToggleSwitch
                id="mode-assessment"
                checked={stepContext?.isStatisticalMode || false}
                onChange={() => {}}
              />
              {stepContext?.isStatisticalMode ? (
                <p>
                  ‚≠ê Your posture assessment has been completed using all the
                  photos you provided.
                  <br />‚≠ê You can view both the calculated statistical posture
                  and the initial posture lines side by side for comparison.
                  <div className={styles.dotsContainer}>
                    <div className={styles.dotWithText}>
                      <div className={styles.dotStatColor}></div>
                      Calculated statistical posture line
                    </div>
                    <div className={styles.dotWithText}>
                      <div className={styles.dotInitColor}></div>
                      Initial posture line
                    </div>
                  </div>
                  ‚≠ê Please note that the displayed angles and classification
                  results are exclusively derived from the calculated
                  statistical posture.
                </p>
              ) : (
                <p>
                  ‚≠ê Your posture assessment has been completed using singal
                  photo you provided.
                </p>
              )}
            </div>
            <b>Calculated Angles</b>
            <p>
              Precise angles measured between key anatomical points to identify
              alignment deviations or asymmetries. These metrics provide a
              detailed understanding of your posture and areas for improvement.
            </p>
            {points[currentFile.uid].sideView ? (
              <div>
                <p>
                  üìè Ear-shoulder angle = {angles['ear-shoulder']}&deg;
                  <br />
                  üìè Shoulder-hip angle = {angles['shoulder-hip']}&deg;
                  <br />
                  üìè Hip-knee angle = {angles['hip-knee']}&deg;
                  <br />
                  üìè Knee-ankle angle = {angles['knee-ankle']}&deg;
                </p>
              </div>
            ) : (
              <div>
                <p>
                  üìè Shoulders angle = {angles['shoulders']}&deg;
                  <br />
                  üìè Hips angle = {angles['hips']}&deg;
                  <br />
                  üìè Knees angle = {angles['knees']}&deg;
                </p>
              </div>
            )}
            <Prediction
              predictedResult={
                prediction as IFullPosturePrediction | ISidePosturePrediction
              }
            ></Prediction>
          </div>
          <button
            className={styles.next}
            onClick={() => changeFile(1)}
            disabled={isNextDisabled()}
            style={isNextDisabled() ? { color: DISABLED_COLOR } : {}}
          >
            &#10095;
          </button>
        </div>
      ) : (
        <div className={styles.spinnerContainer}>
          <img src={shrimpImage} className={styles.spinner} alt="spinner" />
        </div>
      )}
    </>
  );
};

export default Assessment;
